name: Run Python Script
run-name: DB Snapshot (${{ inputs.environment }})

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        type: choice
        default: 'dev'
        required: true
        options:
          - 'dev'
          - 'stg'
          - 'uat'
          - 'prd'    

jobs:
  validate-access:
    runs-on: ubuntu-latest
    outputs:
      is_member: ${{ steps.check-team.outputs.is_member }}
    steps:
      - name: Check if User is in dev1 Team (Only for PRD)
        id: check-team
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Using Classic PAT with read:org
          ORG_NAME: "har-kri"  # Replace with your actual org name
          TEAM_SLUG: "dev1"  # Replace with your correct team slug
        run: |
          if [[ "${{ inputs.environment }}" != "prd" ]]; then
            echo "Skipping team check since environment is not PRD ‚úÖ"
            echo "is_member=true" >> $GITHUB_ENV
            echo "is_member=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Checking team membership for user: $GITHUB_ACTOR"
          echo "Using org: $ORG_NAME, team: $TEAM_SLUG"

          RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/orgs/$ORG_NAME/teams/$TEAM_SLUG/memberships/${{ github.actor }})

          echo "API Response: $RESPONSE"

          if echo "$RESPONSE" | grep -q '"state": "active"'; then
            echo "‚úÖ User $GITHUB_ACTOR is in dev1 team"
            echo "is_member=true" >> $GITHUB_ENV
            echo "is_member=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå User $GITHUB_ACTOR is NOT in dev1 team and cannot deploy to PRD!"
            echo "is_member=false" >> $GITHUB_ENV
            echo "is_member=false" >> $GITHUB_OUTPUT
            exit 1  # Fail the job only if the user selects PRD and is not in dev1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: validate-access
    steps:
      - name: Prevent Unauthorized PRD Deployment
        if: ${{ inputs.environment == 'prd' && needs.validate-access.outputs.is_member == 'false' }}
        run: |
          echo "‚ùå User $GITHUB_ACTOR is not allowed to deploy to PRD."
          exit 1  # Fails the deployment step if user is unauthorized for PRD

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to Selected Environment
        run: echo "üöÄ Deploying to ${{ inputs.environment }}"

      - name: Run Python script
        run: python script2.py
