name: Run Python Script
run-name: DB Snapshot (${{ inputs.environment }})

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        type: choice
        default: 'dev'
        required: true
        options:
          - 'dev'
          - 'stg'
          - 'uat'
          - 'prd'

jobs:
  validate-access:
    runs-on: ubuntu-latest
    outputs:
      is_dev1_member: ${{ steps.check-team.outputs.is_dev1_member }}
    steps:
      - name: Check if User is in dev1 Group
        id: check-team
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Use a PAT, not GITHUB_TOKEN
          ORG_NAME: "har-kri"  # Replace with your GitHub organization name
          TEAM_SLUG: "dev1"  # Replace with your GitHub team name (slug)
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/orgs/$ORG_NAME/teams/$TEAM_SLUG/memberships/${{ github.actor }})

          if [[ "$RESPONSE" == "200" ]]; then
            echo "‚úÖ User $GITHUB_ACTOR is in dev1 group"
            echo "is_dev1_member=true" >> $GITHUB_ENV
            echo "is_dev1_member=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå User $GITHUB_ACTOR is NOT in dev1 group"
            echo "is_dev1_member=false" >> $GITHUB_ENV
            echo "is_dev1_member=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: validate-access
    if: ${{ inputs.environment != 'prd' || needs.validate-access.outputs.is_dev1_member == 'true' }}
    steps:
      - name: Prevent Unauthorized PRD Deployment
        if: ${{ inputs.environment == 'prd' && needs.validate-access.outputs.is_dev1_member != 'true' }}
        run: |
          echo "‚ùå User $GITHUB_ACTOR is not allowed to deploy to PRD."
          exit 1

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to Selected Environment
        run: echo "üöÄ Deploying to ${{ inputs.environment }}"

      - name: Run Python script
        run: python script2.py
